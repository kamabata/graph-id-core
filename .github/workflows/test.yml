name: Python application test with Poetry and pytest

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Cache Poetry dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: poetry install

    - name: Run pytest
      run: poetry run pytest

    - name: Format
      run: poetry run pysen run format
      if: matrix.python-version == '3.9'
    - name: git settings
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
      if: matrix.python-version == '3.9'
    - name: Extract branch name
      id: extract_branch
      run: echo "##[set-output name=BRANCH_NAME;]$(echo ${GITHUB_REF#refs/heads/})"
      if: matrix.python-version == '3.9'
    - name: commit
      run: git commit -m ":bot: Formatting" -a || echo "No changes to commit."
      if: matrix.python-version == '3.9'
    - name: push
      continue-on-error: true
      run: |
        echo target branch is ${{ steps.extract_branch.outputs.BRANCH_NAME }}
        git pull
        git push origin ${{ steps.extract_branch.outputs.BRANCH_NAME }}
      if: matrix.python-version == '3.9'
    - name: Pysen lint
      run: poetry run pysen run lint
      if: matrix.python-version == '3.9'
