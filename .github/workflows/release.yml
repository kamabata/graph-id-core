name: Build and Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.11"
          CIBW_SKIP: "*musllinux*"  # Skip musl Linux builds if spglib doesn't work well
          CIBW_ARCHS: "auto64"
          CIBW_BEFORE_BUILD_LINUX: "rm -rf {project}/build"
          CIBW_BEFORE_BUILD_MACOS: "rm -rf {project}/build"
          CIBW_BEFORE_BUILD_WINDOWS: "if exist build rmdir /s /q build"
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.15
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: "pytest {project}/tests/py/ -v"
          # Test on a subset of Python versions to speed up CI
          CIBW_TEST_SKIP: "cp36-* cp37-*"
        with:
          package-dir: .
          output-dir: wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build sdist
        run: poetry build --format=sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ inputs.test_pypi && 'https://test.pypi.org/legacy/' || '' }}

  upload_release_assets:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: project.whl
          asset_content_type: application/octet-stream

  wait-for-pypi:
    needs: upload_release_assets
    runs-on: ubuntu-latest
    steps:
      - name: Wait for PyPI propagation
        run: |
          sleep 60

  test-install:
    needs: [wait-for-pypi]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - name: Install from PyPI
        run: |
          python -m venv venv
          source venv/bin/activate || venv\Scripts\activate
          pip install --upgrade pip
          pip install graph-id-core
      - name: Test import
        run: |
          source venv/bin/activate || venv\Scripts\activate
          python -c "import graph_id"

